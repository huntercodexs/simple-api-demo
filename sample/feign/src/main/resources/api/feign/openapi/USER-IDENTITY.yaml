openapi: 3.0.2

info:
  title: USER-IDENTITY
  description: |
    The User Identity API is responsible for managing user identities, including creation, retrieval, updating, and 
    deletion of user identities. It also handles user authentication processes such as login and 
    multi-factor authentication (MFA).
  contact:
    name: Bradesco API team
    email: support@bradesco.com
  version: 1.0.0

servers:
  - url: http://localhost:35003/bradesco/security/user-identity/v1
    description: STG
  - url: http://localhost:35003/bradesco/security/user-identity/v1
    description: QA
  - url: http://localhost:35003/bradesco/security/user-identity/v1
    description: UAT
  - url: http://localhost:35003/bradesco/security/user-identity/v1
    description: PROD

security:
  - OauthSecurityUser:
      - write
  - OauthSecurityClient:
      - write

paths:
  /user-identities:
    post:
      tags:
        - Management
      summary: Create Identity
      description: |
        ## Responsibilities
        * Creates an identity for a user.

        ---
        
        ## Usage
        * Response 201 will have a JWT with an user access token and a refresh token (if user selected remember-me option). 
        Note that, if user selected remember-me option, the user access token has a 10 minutes expires time. If not, 
        user access token has 60 minutes expire.

        ---
        
        ## Requirements
        * To access this endpoint, the client must have one of the following role sets:
          * `ADMIN` and `USER` and `AUTH-BASIC`

      operationId: raiseIdentity
      parameters:
        - name: clientId
          in: query
          description: Client id for access
          schema:
            type: string
        - name: verified-account
          in: query
          description: If e-mail and mobile it's already verified
          schema:
            type: boolean
      requestBody:
        description: User Account info. One of userEmail or userMobile are required.
          Both are ideal.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RaiseIdentity'
        required: true
      responses:
        "201":
          description: Identity Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserIdentityResponse'
        "400":
          description: |
            Bad Request
            This endpoint can throw the following errors:
            * `[{"code": "4", "message": "Invalid e-mail."}]`
            * `[{"code": "5", "message": "Invalid mobile."}]`
            * `[{"code": "18", "message": "E-mail or Mobile is required."}]`
            * `[{"code": "21", "message": "Invalid userId"}]`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "401":
          description: |
            Unauthorized
            This endpoint can throw the following errors:
            * `[{"code": "9", "message": "Wrong Client Id or Client Secret."}]`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "412":
          description: |
            Precondition Failed
            This endpoint can throw the following errors:
            * `[{"code": "2", "message": "User Identity already exists."}]`
            * `[{"code": "30", "message": "User Identity already exists, but has no password."}]`
            * `[{"code": "67", "message": "User identity already exists"}]`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      security:
        - OauthSecurityUser:
            - write
        - OauthSecurityClient:
            - write
      x-codegen-request-body-name: userAccountInfo
  /user-identities/retrieve-identity:
    post:
      tags:
        - Management
      summary: Retrieve an Identity
      description: |
        ## Responsibilities
        * Retrieve an identity for a user that does not an full account registration.

        ---
        
        ## Requirements
        * To access this endpoint, the client must have one of the following role sets:
          * `ADMIN` and `USER` and `AUTH-BASIC`

      operationId: retrieveIdentity
      parameters:
        - name: reset
          in: query
          description: Flag for indicate reset password flow
          schema:
            type: boolean
        - name: clientId
          in: query
          description: Client Id for access client
          required: true
          schema:
            type: string
      requestBody:
        description: User identification. If username is an e-mail, then send a token
          by e-mail. If it is a mobile, then send token by SMS <br><br> Mobile userName
          required the patter regionCode-areaCode-phoneNumber (with dash). If there
          is no areaCode, pass '0' as default value to this parameter.
          <br><br><i>Example</i>
          <br>email@email.com
          <br> 55-11-123456789 | 55-0-123456789
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RetrieveIdentity'
        required: true
      responses:
        201:
          description: Token is created and sent
          content: {}
        400:
          description: |
            Bad Request
            This endpoint can throw the following errors:
            * `[{"code": "14", "message": "Email or mobile not found."}]`
            * `[{"code": "92", "message": "Email or mobile invalid."}]`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        401:
          description: |
            Unauthorized
            This endpoint can throw the following errors:
            * `[{"code": "8", "message": "Validation code or username is not valid."}]`
            * `[{"code": "11", "message": "Client ID is required."}]`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        404:
          description: User Not Registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        412:
          description: |
            Precondition Failed
            This endpoint can throw the following errors:
            * `[{"code": "29", "message": "Could not retrieve identity"}]`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        429:
          description: |
            Too many requests
            This endpoint can throw the following errors:
            * `[{"code": "SECURITY_84-PHONE_VALIDATION_429", "message": "Too Many Requests"}]`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      security:
        - OauthSecurityUser:
            - write
        - OauthSecurityClient:
            - write
      x-codegen-request-body-name: userName
  /user-identities/{id}:
    patch:
      tags:
        - Management
      summary: Updates specific identity attributes
      description: |
        ## Responsibilities
        * This endpoint has the function of updates specific attributes for an identity of user.

        ---
        
        ## Requirements
        * To access this endpoint, you must have one of the following sets of roles:
          * `ADMIN` and `USER` and `AUTH-BASIC`

      operationId: addIdentityAdmin
      parameters:
        - name: id
          in: path
          description: User ID or UserIdentity ID to remove
          required: true
          schema:
            type: string
      requestBody:
        description: User Account info. One of userEmail or userMobile are required
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImproveIdentity'
        required: true
      responses:
        "200":
          description: Identity Improved
          content: {}
        "400":
          description: |
            Bad Request
            This endpoint can throw the following errors:
            * `[{"code": "4", "message": "Invalid e-mail."}]`
            * `[{"code": "5", "message": "Invalid mobile."}]`
            * `[{"code": "18", "message": "E-mail or Mobile is required."}]`
            * `[{"code": "41", "message": "Invalid business id."}]`
            * `[{"code": "400", "message": "userMobile.regionCode is required."}]`
            * `[{"code": "400", "message": "userMobile.phoneNumber is required."}]`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "401":
          description: |
            Unauthorized
            This endpoint can throw the following errors:
            * `[{"code": "9", "message": "Wrong Client Id or Client Secret."}]`
            * `[{"code": "10", "message": "JWT is not valid."}]`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "412":
          description: |
            Precondition Failed
            This endpoint can throw the following errors:
            * `[{"code": "2", "message": "User Identity already exists."}]`
            * `[{"code": "30", "message": "User Identity already exists, but has no password."}]`
            * `[{"code": "67", "message": "User identity already exists"}]`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      security:
        - OauthSecurityUser:
            - write
        - OauthSecurityClient:
            - write
      x-codegen-request-body-name: userAccountInfo
    get:
      tags:
        - Management
      summary: Get Identities from user
      description: |
        ## Responsibilities
        * Get Identities for an user account.

        ---
        
        ## Requirements
        * To access this endpoint, the client must have one of the following role sets:
          * `ADMIN` and `USER` and `AUTH-BASIC`

      operationId: getIdentities
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserIdentity'
        "401":
          description: |
            Unauthorized 
            This endpoint can throw the following errors:
            * `[{"code": "9", "message": "Wrong Client Id or Client Secret."}]`
            * `[{"code": "401", "message": "An Authentication object was not found in the SecurityContext."}]`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "404":
          description: |
            Not Found
            This endpoint can throw the following errors:
            * `[{"code": "21", "message": "Invalid userId"}]`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "405":
          description: |
            Method Not Allowed
            This endpoint can throw the following errors:
            * `[{"code": "405", "message": "Request method 'POST' is not supported."}]`
            * `[{"code": "405", "message": "Request method 'PUT' is not supported."}]`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      security:
        - OauthSecurityUser:
            - write
        - OauthSecurityClient:
            - write
    delete:
      tags:
        - Management
      summary: Remove Identity
      description: |
        ## Responsibilities
         * Removes an Identity for a deleted user or business account.
        
         ---
        
        ## Requirements
        * To access this endpoint, the client must have one of the following role sets:
          * `ADMIN` and `USER` and `AUTH-BASIC`

      operationId: removeIdentityAdmin
      parameters:
        - name: id
          in: path
          description: User ID or UserIdentity ID to remove
          schema:
            type: string
          required: true
      responses:
        "204":
          description: Identity Removed
        "401":
          description: |
            Unauthorized
            This endpoint can throw the following errors:
            * `[{"code": "9", "message": "Wrong Client Id or Client Secret."}]`
            * `[{"code": "10", "message": "JWT is not valid."}]`
            * `[{"code": "401", "message": "An Authentication object was not found in the SecurityContext."}]`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "403":
          description: |
            Forbidden
            This endpoint can throw the following errors:
            * `[{"code": "27", "message": "You do not have enough privileges."}]`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "405":
          description: |
            Method Not Allowed
            This endpoint can throw the following errors:
            * `[{"code": "405", "message": "Request method 'POST' is not supported."}]`
            * `[{"code": "405", "message": "Request method 'PUT' is not supported."}]`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      security:
        - OauthSecurityUser:
            - write
        - OauthSecurityClient:
            - write
      x-codegen-request-body-name: userAccountInfo
  /user-identities/reset-password:
    post:
      tags:
        - Management
      summary: Reset password
      description: |
        ## Responsibilities
        * Reset a password for a user account.

        ---
        
        ## Requirements
        * To access this endpoint, the client must have one of the following role sets:
          * `ADMIN` and `USER` and `AUTH-BASIC`

      operationId: resetPassword
      parameters:
        - name: clientId
          in: query
          description: Client Id for access client
          schema:
            type: string
        - name: remember-me
          in: query
          description: Remember-me selected option
          schema:
            type: boolean
      requestBody:
        description: Password to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPassword'
        required: true
      responses:
        "201":
          description: Password successfully reset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationResponse'
        "400":
          description: |
            Bad Request
            This endpoint can throw the following errors:
            * `[{"code": "6", "message": "Invalid pass phrase."}]`
            * `[{"code": "30", "message": "User Identity already exists, but has no password."}]`
            * `[{"code": "400", "message": "newPassword is required."}]`
            * `[{"code": "400", "message": "validationCode is required."}]`
            * `[{"code": "400", "message": "username is required."}]`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "401":
          description: |
            Unauthorized
            This endpoint can throw the following errors:
            * `[{"code": "9", "message": "Wrong Client Id or Client Secret."}]`
            * `[{"code": "10", "message": "JWT is not valid."}]`
            * `[{"code": "8", "message": "Validation code or username is not valid."}]`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "412":
          description: |
            Precondition Failed
            This endpoint can throw the following errors:
            * `[{"code": "67", "message": "User identity already exists"}]`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "422":
          description: |
            Unprocessable Entity.
            This endpoint can throw the following errors:
            * `[{"code": "108", "message": "Password was already used before."}]`
            * `[{"code": "109", "message": "Password can not be the same as login."}]`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      security:
        - OauthSecurityUser:
            - write
        - OauthSecurityClient:
            - write
      x-codegen-request-body-name: newPassword
  /user-identities/identify:
    post:
      tags:
        - Authentication
      summary: User identification
      description: |
        ## Responsibilities
        * Confirm identity a user that does not have a password registered. Used for create/reset a password.

        ---
        
        ## Requirements
        * To access this endpoint, the client must have one of the following role sets:
          * `ADMIN` and `USER` and `AUTH-BASIC`

      operationId: identifyUser
      parameters:
        - name: remember-me
          in: query
          description: Remember-me selected option
          required: false
          schema:
            type: boolean
        - name: clientId
          in: query
          description: Client Id for access client
          required: true
          schema:
            type: string
      requestBody:
        description: User identification. If username is an e-mail, then send a token
          by e-mail. If it is a mobile, then send token by SMS <br><br> Mobile userName
          required the patter regionCode-areaCode-phoneNumber (with dash). If there
          is no areaCode, pass '0' as default value to this parameter.
          <br><br><i>Example</i>
          <br>email@email.com
          <br> 55-11-123456789 | 55-0-123456789
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserIdentify'
        required: true
      responses:
        201:
          description: User Identified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        401:
          description: |
            Unauthorized
            This endpoint can throw the following errors:
            * `[{"code": "8", "message": "Validation code or username is not valid."}]`
            * `[{"code": "11", "message": "Client ID is required."}]`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        404:
          description: User Not Registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        412:
          description: Precondition Failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
  /user-identities/login:
    post:
      tags:
        - Authentication
      summary: Login user
      description: |
        ## Responsibilities
        * Receives credentials and client token to log in a user.

        ---
        
        ## Usage
        * Response 201 will have a JWT with an user access token and a refresh token (if user secected remember-me option). 
        Note, if user selected remember-me option, the user access token has a 10 minutes expire time. 
        If not, user access token has 60 minutes expire.

        ---
        
        ## Requirements
        * To access this endpoint, the client must have one of the following role sets:
          * `ADMIN` and `USER` and `AUTH-BASIC`

      operationId: loginUser
      parameters:
        - name: clientId
          in: query
          description: Client ID
          required: true
          schema:
            type: string
        - name: remember-me
          in: query
          description: Remember-me selected option
          required: true
          schema:
            type: boolean
        - name: ip
          in: header
          description: IP from origin
          required: false
          schema:
            type: string
      requestBody:
        description: Login information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
        required: false
      responses:
        201:
          description: Login Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationResponse'
        401:
          description: |
            Unauthorized
            This endpoint can throw the following errors:
            * `[{"code": "8", "message": "Validation code or username is not valid."}]`
            * `[{"code": "11", "message": "Client ID is required."}]`
            * `[{"code": "12", "message": "Wrong Username or Password"}]`
            * `[{"code": "13", "message": "Invalid Client Id."}]`
            * `[{"code": "16", "message": "User has no password."}]`
            * `[{"code": "62", "message": "User is blocked for 30 minutes."}]`
            * `[{"code": "166", "message": "Device marked as reliability not accepted."}]`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        403:
          description: |
            Forbidden
            This endpoint can throw the following errors:
            * `[{"code": "140", "message": "Blocked due to inactivity."}]`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        405:
          description: |
            Method Not Allowed
            This endpoint can throw the following errors:  
            * `[{"code": "405", "message": "Request method 'GET' is not supported."}]`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        415:
          description: |
            Unsupported Media Type
            
            This endpoint can throw the following errors:             
            * `[{"code": "415", "message": "Content type '' not supported"}]`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
  /user-identities/handle-auth:
    post:
      tags:
        - Authentication
      summary: Generate a renew app token based on SAML integration informed data
      description: |
        ## Responsibilities
        * Generate a renew app token based on SAML integration informed data.
        
        ---
        
        ## Requirements
        * To access this endpoint, you must have:
          * `ADMIN` and `USER` and `AUTH-BASIC`

      operationId: samlHandleAuthentication
      requestBody:
        description: SAML identity information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SAMLIdentity'
        required: true
      parameters:
        - name: clientId
          in: query
          description: Client ID registered to identify
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Digital Certificate Authentication Authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RenewAppToken'
        '400':
          description: |
            Bad Request
            This endpoint can throw the following errors:
            * `[{"code": "400", "message": "email is required."}]`
            * `[{"code": "400", "message": "groups is required."}]`

          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        '401':
          description: |
            Unauthorized 
            
            This endpoint can throw the following errors:
            * `[{"code": "9", "message": "Wrong Client Id or Client Secret."}]`
            * `[{"code": "10", "message": "JWT is not valid."}]`
            * `[{"code": "13", "message": "Invalid Client Id."}]`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        '412':
          description: |
            Precondition Failed
            This endpoint can throw the following errors:
            * `[{code": "43", "message": "Invalid client id."}]`
            * `[{code": "55", "message": "Scopes restrictions have not been configured"}]`
            * `[{code": "56", "message": "No configuration found for this metadata."}]`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        '415':
          description: Unsupported Media Type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        '503':
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      security:
        - OauthSecurityUser:
            - write
        - OauthSecurityClient:
            - write
  /user-identities/handle-federation:
    post:
      tags:
        - Authentication
      summary: Federated authentication of an external user
      description: |
        ## Responsibilities
        * Perform federated authentication of an external user based on the data returned by the client IDP in SAML integration.

        ---
        
        ## Requirements
        * To access this endpoint, the client must have one of the following role sets:
          * `ADMIN` and `USER` and `AUTH-BASIC`

      operationId: handleFederation
      requestBody:
        description: Federated Authentication
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HandleFederationRequest'
        required: true
      responses:
        "200":
          description: Digital Certicate Federated Authentication Authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenExchangeResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "422":
          description: |
            Unprocessable Entity.
            This endpoint can throw the following errors:
            * `[{"code": "159", "message": "Client Id not exists."}]`
            * `[{"code": "160", "message": "Email or documentId must be provided."}]`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      security:
        - OauthSecurityUser:
            - write
        - OauthSecurityClient:
            - write
      x-codegen-request-body-name: newPassword
  /user-identities/me:
    delete:
      tags:
        - Me
      summary: Remove Identity
      description: |
        ## Responsibilities
        * Removes an Identity for a deleted user or business account.
        
        ---
        
        ## Requirements
        * To access this endpoint, the client must have one of the following role sets:
          * `ADMIN` and `USER` and `AUTH-BASIC`

      operationId: removeIdentity
      security:
        - OauthSecurityUser:
            - write
        - OauthSecurityClient:
            - write
      responses:
        '204':
          description: Identity Removed
        '401':
          description: |
            Unauthorized
            This endpoint can throw the following errors:
            * `[{"code": "9", "message": "Wrong Client Id or Client Secret."}]`
            * `[{"code": "10", "message": "JWT is not valid."}]`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
    patch:
      tags:
        - Me
      summary: Add Identity
      description: |
        ## Responsibilities
        * Add an identity for a user that already has one.
        
        ---
        
        ## Usage
        * If the user has an identity with e-mail, mobile fields must be filled in this method and vice versa.
        
        ---
        
        ## Requirements
        * To access this endpoint, the client must have one of the following role sets:
          * `ADMIN` and `USER` and `AUTH-BASIC`

      operationId: addIdentity
      security:
        - OauthSecurityUser:
            - write
        - OauthSecurityClient:
            - write
      requestBody:
        description: User Account info. One of userEmail or userMobile are required
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImproveIdentity'
      responses:
        '200':
          description: Identity Improved
        '400':
          description: |
            Bad Request
            This endpoint can throw the following errors:
            * `[{"code": "4", "message": "Invalid e-mail."}]`
            * `[{"code": "5", "message": "Invalid mobile."}]`
            * `[{"code": "18", "message": "E-mail or Mobile is required."}]`
            * `[{"code": "41", "message": "Invalid business id."}]`
            * `[{"code": "400", "message": "userMobile is invalid."}]`
            * `[{"code": "400", "message": "userMobile.phoneNumber is required."}]`
            * `[{"code": "400", "message": "userMobile.regionCode is required."}]`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        '401':
          description: |
            Unauthorized
            This endpoint can throw the following errors:
            * `[{"code": "9", "message": "Wrong Client Id or Client Secret."}]`
            * `[{"code": "10", "message": "JWT is not valid."}]`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        '412':
          description: |
            Precondition Failed
            This endpoint can throw the following errors:
            * `[{"code": "2", "message": "User Identity already exists."}]`
            * `[{"code": "30", "message": "User Identity already exists, but has no password."}]`
            * `[{"code": "67", "message": "User identity already exists"}]`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
  /user-identities/me/leverage-identity-mfa:
    post:
      tags:
        - Me
      summary: Leverage MFA
      description: |
        ## Responsibilities
        * Send a SMS to the user main mobile registered with a token.
        
        ---
        
        ## Requirements
        * To access this method the client (application) must have:
          * `ADMIN` and `USER` and `AUTH-BASIC`

      operationId: leverageMfa
      parameters:
        - name: viaEmail
          in: query
          description: |
            Send token via email when true. If false or don't sent this parameter, send token by SMS.
          required: false
          schema:
            type: boolean
      responses:
        201:
          description: Token Sent
        401:
          description: |
            Unauthorized
            This endpoint can throw the following errors:
            * `[{"code": "9", "message": "Wrong Client Id or Client Secret."}]`
            * `[{"code": "10", "message": "JWT is not valid."}]`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        422:
          description: |
            Unprocessable Entity.
            
            This endpoint can throw the following errors:
            
            This error occurs when viaEmail queryParameter is true and user hasn't an email contact or when viaEmail queryParameter is false or null and user hasn't a mobile contact.
            * `{"code": "14", "description": "Email or mobile not found."}`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        429:
          description: |
            Too many requests
            
            This endpoint can throw the following errors:
            * `[{"code": "SECURITY_84-PHONE_VALIDATION_429", "message": "Too Many Requests"}]`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
  /user-identities/me/fulfill-mfa:
    post:
      tags:
        - Me
      summary: Fulfill MFA
      description: |
        ## Responsibilities
        * Validate a MF Token previously sent.

        ---
        ## Usage
        * This end point should only be accessed with a basic authentication level. Response 200 will have a JWT with multifactor authentication token.

        ---
        
        ## Requirements
        * To access this endpoint, the client must have one of the following role sets:
          * `ADMIN` and `USER` and `AUTH-BASIC`

      operationId: fulfillMfa
      requestBody:
        description: Token MFA.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MFAToken'
        required: true
      responses:
        201:
          description: |
            Multifactor Authentication Authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationResponse'
        400:
          description: |
            Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        401:
          description: |
            Unauthorized
            This endpoint can throw the following errors:
            
            * `[{"code": "8", "message": "Validation code or username is not valid."}]`
            
            * `[{"code": "9", "message": "Wrong Client Id or Client Secret."}]`
            
            * `[{"code": "10", "message": "JWT is not valid."}]`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        403:
          description: |
            Forbidden
            This endpoint can throw the following errors:
            
            * `[{"code": "91", "message": "Refused association."}]`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        404:
          description: |
            User Not Registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        500:
          description: |
            Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
  /user-identities/me/add-password:
    post:
      tags:
        - Me
      summary: Create password
      description: |
        ## Responsibilities
        * Create a password for a user account.

        ---
        
        ## Requirements
        * To access this endpoint, the client must have one of the following role sets:
          * `ADMIN` and `USER` and `AUTH-BASIC`

      operationId: createPassword
      parameters:
        - name: remember-me
          in: query
          description: Remember-me selected option
          required: false
          schema:
            type: boolean
      requestBody:
        description: User new password.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePassword'
        required: true
      responses:
        201:
          description: Password Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationResponse'
        400:
          description: |
            Bad Request
            This endpoint can throw the following errors:
            * `[{"code": "6", "message": "Invalid pass phrase."}]`
            * `[{"code": "17", "message": "User already has a registered password."}]`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        401:
          description: |
            Unauthorized
            This endpoint can throw the following errors:
            * `[{"code": "9", "message": "Wrong Client Id or Client Secret."}]`
            * `[{"code": "10", "message": "JWT is not valid."}]`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        404:
          description: User Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        412:
          description: |
            Precondition Failed
            This endpoint can throw the following errors:
            * `[{"code": "34", "message": "You must have a verified Email or Mobile."}]`
            * `[{"code": "67", "message": "User identity already exists"}]`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        422:
          description: |
            Unprocessable Entity.
            This endpoint can throw the following errors:
            * `[{"code": "109", "message": "Password can not be the same as login."}]`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
  /user-identities/me/change-password:
    post:
      tags:
        - Me
      summary: Change Password
      description: |
        ## Responsibilities
        * Change a registered password.

        ---
        
        ## Requirements
        * To access this endpoint, the client must have one of the following role sets:
          * `ADMIN` and `USER` and `AUTH-BASIC`
        
        * The new password must contain: 
            * At least 8 characters. 
            * Have at least one uppercase letter. 
            * Have a number or special character.

      operationId: changePassword
      requestBody:
        description: The password to be changed
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePassword'
        required: true
      responses:
        "200":
          description: Password Changed
          content: {}
        "400":
          description: |
            Bad Request
            This endpoint can throw the following errors:
            * `[{"code": "1", "message": "Invalid pass phrase length."}]`
            * `[{"code": "6", "message": "Invalid pass phrase."}]`
            * `[{"code": "7", "message": "Current password does not match."}]`
            * `[{"code": "22", "message": "User does not have a registered password yet"}]`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "401":
          description: |
            Unauthorized
            This endpoint can throw the following errors:
            * `[{"code": "9", "message": "Wrong Client Id or Client Secret."}]`
            * `[{"code": "10", "message": "JWT is not valid."}]`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "412":
          description: |
            Precondition Failed
            This endpoint can throw the following errors:
            * `[{"code": "67", "message": "User identity already exists"}]`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "422":
          description: |
            Unprocessable Entity.
            This endpoint can throw the following errors:
            * `[{"code": "108", "message": "Password was already used before."}]`
            * `[{"code": "109", "message": "Password can not be the same as login."}]`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      security:
        - OauthSecurityUser:
            - write
        - OauthSecurityClient:
            - write
      x-codegen-request-body-name: changePassword
  /user-identities/me/assurance-level/calculate:
    post:
      tags:
        - Me
      summary: calculateAssuranceLevel
      description: |
        ## Responsibilities
        * Calculate the tiers and generate an opaque token.

        ---
        
        ## Requirements
        * To access this endpoint, the client must have one of the following role sets:
          * `ADMIN` and `USER` and `AUTH-BASIC`

      operationId: calculateAssuranceLevel
      responses:
        201:
          description: |
            **Created** - Successfully generated opaque token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpaqueToken'
        401:
          description: |
            **Unauthorized** - This endpoint can throw the following errors:
            * `[{"code": "10", "message": "JWT is not valid."}]`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        405:
          description: |
            **Method Not Allowed** - Return when the Request Method is not supported
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ErrorModel"
        500:
          description: |
            **Internal Server Error**
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        503:
          description: '**Service Unavailable**'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ErrorModel'
        504:
          description: '**Gateway Timeout** - Returns when a timeout error occurs'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ErrorModel'
        default:
          description: |
            **Unexpected Error**
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      security:
        - OauthSecurityUser:
            - write
        - OauthSecurityClient:
            - write
  /user-identities/me/assurance-level/redeem-token:
    post:
      tags:
        - Me
      summary: RedeemToken
      description: |
        ## Responsibilities
        * Validate the opaque token and generate a new token based on the calculated tiers.

        ---
        
        ## Requirements
        * To access this endpoint, the client must have one of the following role sets:
          * `ADMIN` and `USER` and `AUTH-BASIC`

      requestBody:
        description: Process calculated tiers with opaque token
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpaqueToken'
      operationId: RedeemToken
      responses:
        201:
          description: |
            **Created** - Successfully generated JWT token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationResponse'
        401:
          description: |
            **Unauthorized** - This endpoint can throw the following errors:
            * `[{"code": "10", "message": "JWT is not valid."}]`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        405:
          description: |
            **Method Not Allowed** - Return when the Request Method is not supported
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ErrorModel"
        415:
          description: |
            **Unsupported Media Type** - Return when the Request request payload isn't in the right format
            
            This endpoint can throw the following errors:
            * `[{ "code": "415", "message": "Content type 'example/example' not supported." }]`
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ErrorModel"
        500:
          description: |
            **Internal Server Error**
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        503:
          description: '**Service Unavailable**'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ErrorModel'
        504:
          description: '**Gateway Timeout** - Returns when a timeout error occurs'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ErrorModel'
        default:
          description: |
            **Unexpected Error**
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      security:
        - OauthSecurityUser:
            - write
        - OauthSecurityClient:
            - write
  /user-identities/me/reset-password:
    post:
      tags:
        - Me
      summary: Reset password
      description: |
        ## Responsibilities
        * Reset a password for a user account.

        ---
        
        ## Requirements
        * To access this endpoint, the client must have one of the following role sets:
          * `ADMIN` and `USER` and `AUTH-BASIC`

      operationId: meResetPassword
      parameters:
        - name: remember-me
          in: query
          description: Remember-me selected option
          schema:
            type: boolean
      requestBody:
        description: Password to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MeResetPassword'
        required: true
      responses:
        "201":
          description: Password successfully reset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationResponse'
        "400":
          description: |
            Bad Request
            This endpoint can throw the following errors:
            * `[{"code": "6", "message": "Invalid pass phrase."}]`
            * `[{"code": "30", "message": "User Identity already exists, but has no password."}]`
            * `[{"code": "400", "message": "newPassword is required."}]`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "401":
          description: |
            Unauthorized
            This endpoint can throw the following errors:
            * `[{"code": "9", "message": "Wrong Client Id or Client Secret."}]`
            * `[{"code": "10", "message": "JWT is not valid."}]`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "412":
          description: |
            Precondition Failed
            This endpoint can throw the following errors:
            * `[{"code": "67", "message": "User identity already exists"}]`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "422":
          description: |
            Unprocessable Entity.
            This endpoint can throw the following errors:
            * `[{"code": "108", "message": "Password was already used before."}]`
            * `[{"code": "109", "message": "Password can not be the same as login."}]`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "503":
          description: '**Service Unavailable**'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ErrorModel'
        "504":
          description: '**Gateway Timeout** - Returns when a timeout error occurs'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ErrorModel'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      security:
        - OauthSecurityUser:
            - write
        - OauthSecurityClient:
            - write
      x-codegen-request-body-name: newPassword
  /business-group-identities/business-groups/{id}/attach:
    post:
      tags:
        - Business Group
      summary: Attach information of a business group
      description: |
        ## Responsibilities
        * Attach information of a business group.

        ---
        
        ## Requirements
        * To access this endpoint, the client must have one of the following role sets:
          * `ADMIN` and `USER` and `AUTH-BASIC`
        
        * To access this endpoint, the client (application) must have one of the following sets of scopes:
          * `BUSINESS_GROUP_MANAGEMENT`
        
        ---
        
        ## Usage
        * When action is `CREATE_BUSINESS_GROUP`:
          * Both businessAccounts and controllerUsers must be provided.
        
        * When action is `ATTACH_BUSINESS_ACCOUNT`:
          * Only businessAccounts must be provided.
        
        * When action is `ATTACH_CONTROLLER_USER`:
          * Only controllerUsers must be provided.
        
        * When action is `PATCH_CONTROLLER_USER`:
          * Only controllerUsers must be provided.

      operationId: attachBusinessGroup
      parameters:
        - name: id
          in: path
          description: Business Group ID to attach information
          required: true
          schema:
            type: string
      requestBody:
        description: Information to be attached
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttachBusinessGroupRequest'
        required: true
      responses:
        "204":
          description: No content
        "400":
          description: |
            Bad Request
            This endpoint can throw the following errors:
            * `[{"code": "400", "message": "Bad Request"}]`
            * `[{"code": "400", "message": "action is required."}]`
            * `[{"code": "400", "message": "controllerUsers[].userId is required."}]`
            * `[{"code": "400", "message": "controllerUsers[].type is required."}]`
            * `[{"code": "400", "message": "businessAccounts[].businessId is required."}]`
            * `[{"code": "167", "message": "businessAccounts and controllerUsers are required when action is CREATE_BUSINESS_GROUP."}]`
            * `[{"code": "168", "message": "businessAccounts is required when action is ATTACH_BUSINESS_ACCOUNT."}]`
            * `[{"code": "169", "message": "controllerUsers is required when action is ATTACH_CONTROLLER_USER."}]`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "401":
          description: |
            Unauthorized
            This endpoint can throw the following errors:
            * `[{"code": "401", "message": "Unauthorized."}]`
            * `[{"code": "10", "message": "JWT is not valid."}]`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "404":
          description: |
            Not Found.
            This endpoint can throw the following errors:
            * `[{"code": "170", "message": "Business Group not found."}]`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "405":
          description: |
            Method Not Allowed
            This endpoint can throw the following errors:  
            * `[{"code": "405", "message": "Request method 'GET' is not supported."}]`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "415":
          description: |
            Unsupported Media Type
            This endpoint can throw the following errors:             
            * `[{"code": "415", "message": "Content type '' not supported"}]`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "422":
          description: |
            Unprocessable Entity
            This endpoint can throw the following errors:             
            * `[{"code": "174", "message": "Business Group identity already exists."}]`
            
            **OBS: The error above only occurs when the action field is `CREATE_BUSINESS_GROUP`**
            * `[{"code": "177", "message": "UserIds already registered to the business group with another type."}]`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      security:
        - OauthSecurityUser:
            - write
        - OauthSecurityClient:
            - write
  /business-group-identities/business-groups/{id}/detach:
    post:
      tags:
        - Business Group
      summary: Detach information of a business group
      description: |
        ## Responsibilities
        * Detach information of a business group.

        ---
        
        ## Requirements
        * To access this endpoint, the client must have one of the following role sets:
          * `ADMIN` and `USER` and `AUTH-BASIC`
        
        * To access this endpoint, the client (application) must have one of the following sets of scopes:
            * `BUSINESS_GROUP_MANAGEMENT`
        
        ---
        
        ## Usage
        * When action is `DELETE_BUSINESS_GROUP`:
          * All records linked to the business group will be deleted.
        
        * When action is `DETACH_BUSINESS_ACCOUNT`:
          * Only businessAccounts must be provided to detach.
        
        * When action is `DETACH_CONTROLLER_USER`:
          * Only controllerUsers must be provided to detach.

      operationId: detachBusinessGroup
      parameters:
        - name: id
          in: path
          description: Business Group ID to detach information
          required: true
          schema:
            type: string
      requestBody:
        description: Information to be detached
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DetachBusinessGroupRequest'
        required: true
      responses:
        "204":
          description: No content
        "400":
          description: |
            Bad Request
            This endpoint can throw the following errors:
            * `[{"code": "400", "message": "Bad Request"}]`
            * `[{"code": "400", "message": "action is required."}]`
            * `[{"code": "400", "message": "businessAccounts[].businessId is required."}]`
            * `[{"code": "400", "message": "controllerUsers[].userId is required"}]`
            * `[{"code": "400", "message": "controllerUsers[].type is required"}]`
            * `[{"code": "170", "message": "businessAccounts is required when action is DETACH_BUSINESS_ACCOUNT."}]`
            * `[{"code": "171", "message": "controllerUsers is required when action is DETACH_CONTROLLER_USER."}]`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "401":
          description: |
            Unauthorized
            This endpoint can throw the following errors:
            * `[{"code": "401", "message": "Unauthorized."}]`
            * `[{"code": "10", "message": "JWT is not valid."}]`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "404":
          description: |
            Not Found.
            This endpoint can throw the following errors:
            * `[{"code": "172", "message": "Business Group not found."}]`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "405":
          description: |
            Method Not Allowed
            This endpoint can throw the following errors:  
            * `[{"code": "405", "message": "Request method 'GET' is not supported."}]`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "415":
          description: |
            Unsupported Media Type
            This endpoint can throw the following errors:             
            * `[{"code": "415", "message": "Content type '' not supported"}]`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      security:
        - OauthSecurityUser:
            - write
        - OauthSecurityClient:
            - write

components:
  schemas:
    TokenExchangeResponse:
      type: object
      required:
        - validationToken
        - originClientId
        - userId
      properties:
        validationToken:
          type: string
          description: Validation token returned in /user-identities/change-app
        originClientId:
          type: string
          description: Origin application
        userId:
          type: string
          description: User ID from origin token
    HandleFederationRequest:
      required:
        - organizationId
        - registrationId
        - idpUsernameKey
        - clientIdOfProduct
        - attributes
      type: object
      properties:
        organizationId:
          type: string
          example: some-organizationId
        registrationId:
          type: string
          example: some-registrationId
        idpUsernameKey:
          type: string
          example: email@email.com or 09876544321
          description: Value of email or documentId
        clientIdOfProduct:
          type: string
          example: client-id-of-product
        attributes:
          description: List of attributes (key/value) configured in Consumer Relying Party that correspond to data from the user's federated account.
          type: array
          items:
            $ref: '#/components/schemas/HandleFederationAttributesRequest'
        permissions:
          description: List of roles configured in the Consumer Relying Party.
          type: array
          uniqueItems: true
          items:
            type: string
            example: ROLE_registrationId_permission1
    HandleFederationAttributesRequest:
      required:
        - name
        - value
      type: object
      properties:
        name:
          type: string
          example: DOCUMENT_ID
        value:
          type: object
          example: '10293384'
          description: This field must be a string unless the metadata field is true.
        metadata:
          type: boolean
          example: false
          description: Only pass this field when the attribute is metadata.
    SAMLIdentity:
      type: object
      required:
        - groups
        - email
      properties:
        email:
          type: string
          example: "my-email@email.com"
        mainframeLogon:
          type: string
          example: "ABC1234"
        fullName:
          type: string
          example: "Full Name Test"
        businessId:
          type: string
          example: "60773aa94a50c11cfe00314d"
        groups:
          type: array
          items:
            type: string
            example: "IDC_GERENCIADOR_MANAGER"
    RenewAppToken:
      type: object
      required:
        - validationToken
        - originClientId
        - userId
      properties:
        validationToken:
          type: string
          description: Validation token returned in /user-identities/change-app
        originClientId:
          type: string
          description: Origin application
        userId:
          type: string
          description: User ID from origin token
        ip:
          type: string
          description: Origin IP address. If nothing is passed by the request, it will be filled automatically by HeadersIpParamBody policy that gets the caller IP address from X-Forwarded-For header.
    UserAccountProperties:
      required:
        - userId
      type: object
      properties:
        userId:
          type: string
          description: User id from user account service
    TokenInformation:
      required:
        - clientId
        - loginGrantedAuthorities
        - tokenRequestType
      type: object
      properties:
        clientId:
          type: string
          description: Unique identifier to client
          example: 5c6e91ed8321222db87124a3
        sessionId:
          type: string
          description: Unique identifier session
          example: 5c6e91ed83234111334sf1
        defaultClientId:
          type: string
          description: Unique identifier to default client
          example: 6021a87ee80a460ad3791511
        tokenRequestType:
          type: string
          description: Token type
          enum:
            - USER
            - CLIENT
            - REMEMBER_ME
            - PRODUCT
        deviceId:
          type: string
          description: Unique identifier to deviceId
          example: 604b856442b4441b91c99fe4
        userId:
          type: string
          description: Unique identifier to user
          example: 5ef904d4b91ac90414895f3c
        logon:
          type: string
          description: Unique identifier to logon
          example: A123321B
        param:
          type: string
          description: Generated param
          example: D1VEYFB9DQVN8EVE6ESRUXW1DPPG18DNYNRMNPGV0LYIS4Q9DLVNB29D6SG1A
        rememberMe:
          type: boolean
          description: Generate a refresh token
          example: true
          default: false
        loginGrantedAuthorities:
          type: string
          description: Token type
          enum:
            - CLI_AUTH_IDENTIFIED
            - CLI_AUTH_BASIC
            - AUTH_IDENTIFIED
            - AUTH_BASIC
            - AUTH_MFA
            - AUTH_SMART
            - AUTH_STRONG
            - AUTH_RESET_OTP_VALIDATED
        userCredential:
          type: string
          description: |
            `username:password` **Base 64 encode from Basic** Authentication </br>
            *This field will only works for **USER** type*</br>
            *If you send this information the username and password will be validated*
          example: "dXNlcm5hbWU6cGFzc3dvcmQ="
    RetrieveIdentity:
      required:
        - userName
      type: object
      properties:
        userName:
          type: string
          description: UserName could be an e-mail or a mobile, depends on user choice.
    ErrorList:
      type: array
      items:
        $ref: '#/components/schemas/ErrorModel'
    ErrorModel:
      required:
        - code
        - message
      type: object
      properties:
        code:
          type: string
          description: Code error.
          example: "01"
        message:
          type: string
          description: Return message reference code error.
          example: message reference code error
    RefreshToken:
      type: object
      required:
        - userName
        - refreshToken
      properties:
        userName:
          type: string
        refreshToken:
          type: string
        deviceTokenId:
          type: string
    ValidateAuthorizationData:
      required:
        - billingType
        - productAlias
        - sku
      type: object
      properties:
        productAlias:
          type: string
        sku:
          type: string
        billingType:
          $ref: '#/components/schemas/BillingType'
    BillingType:
      type: string
      enum:
        - EXPEND
        - CREDIT
        - EXPIRATION
    UserIdentityResponse:
      required:
        - userIdentityId
      type: object
      properties:
        userIdentityId:
          type: string
        accessToken:
          type: string
        tokenType:
          type: string
        refreshToken:
          type: string
        expiresIn:
          type: string
        scope:
          type: array
          items:
            type: string
            description: Requisition scope like ['READ','WRITE', 'EXECUTE' or 'ALL']
    AuthorizationResponse:
      type: object
      required:
        - accessToken
        - tokenType
        - expiresIn
        - scope
      properties:
        accessToken:
          type: string
          example: "eyJhbGciOiJSUzUxMiJ9.eyJqdGkiOiI1Y2ZlMzUxQ..."
        tokenType:
          type: string
          example: "Bearer"
        refreshToken:
          type: string
          example: "78e58fba-7282-4f99-a2da-d37eefc1ab12"
        expiresIn:
          type: string
          example: "1612483680"
        scope:
          type: array
          items:
            type: string
            example: READ, WRITE
            description: Requisition scope like
    RaiseIdentity:
      required:
        - userId
      type: object
      properties:
        userId:
          type: string
        userEmail:
          type: string
        userName:
          type: string
        businessId:
          type: string
        lead:
          type: boolean
          default: false
        userMobile:
          $ref: '#/components/schemas/UserMobile'
        token:
          type: string
      description: One of userEmail or userMobile are required
    UserIdentify:
      type: object
      required:
        - userName
        - validationCode
      properties:
        userName:
          type: string
          description: Username could be an e-mail or a mobile, depends on user choice.
        validationCode:
          type: string
          description: Code received at email or mobile
    ResetPassword:
      required:
        - newPassword
        - username
        - validationCode
      type: object
      properties:
        newPassword:
          type: string
        validationCode:
          type: string
        username:
          type: string
    ControllerUserRequest:
      type: object
      description: userId and type of controller user
      required:
        - userId
        - type
      properties:
        userId:
          type: string
          pattern: '^[a-f0-9]+$'
          example: '5b2d6db58b9a2900088177e8'
        type:
          type: string
          enum:
            - BASIC
            - MANAGER
    DetachControllerUserRequest:
      type: object
      description: userId and type of controller user
      required:
        - userId
        - type
      properties:
        userId:
          type: string
          pattern: '^[a-f0-9]+$'
          example: '5b2d6db58b9a2900088177e8'
    BusinessAccountsRequest:
      type: object
      description: List of Account BusinessId
      required:
        - businessId
      properties:
        businessId:
          type: string
          pattern: '^[a-f0-9]+$'
          example: '5b2d6db58b9a2900088177e8'
    MeResetPassword:
      required:
        - newPassword
      type: object
      properties:
        newPassword:
          type: string
    MFAToken:
      type: object
      required:
        - mfatoken
      properties:
        mfatoken:
          type: string
        deviceId:
          type: string
    Login:
      type: object
      properties:
        deviceTokenId:
          type: string
        deviceId:
          type: string
        deviceVersion:
          type: string
          enum: [ V1, V2 ]
          default: V1
    AuthenticationFactor:
      type: object
      required:
        - id
        - type
        - credential
        - default
      properties:
        id:
          type: string
          description: Unique identifier to alternative contact, ```main-email``` or ```main-mobile```
          example: "5efd263cbe2d398bb00b97ea"
        contactType:
          type: string
          description: Contact type
          enum:
            - EMAIL
            - MOBILE
        email:
          type: string
          example: example@br.bradesco.com
        mobile:
          $ref: '#/components/schemas/UserMobile'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/AuthenticationFactorSettings'
          description: When a tag is applied to an authentication factor, associated rules can be executed to change tags from another authentication factors. These tags are also used on parameters to filter results when retrieve the contacts.
          example: "[\"MARKED_RESOURCES\"]"
        credential:
          type: boolean
          example: false
        default:
          type: boolean
          example: false
    AuthenticationFactorsRequest:
      required:
        - authenticationFactors
      properties:
        authenticationFactors:
          type: array
          items:
            $ref: '#/components/schemas/NewAuthenticationFactorRequest'
    NewAuthenticationFactorRequest:
      type: object
      required:
        - id
        - contactType
      properties:
        id:
          type: string
          description: Unique identifier to alternative contact, ```main-email``` or ```main-mobile```. It is the same ID created on Account API.
          example: "5efd263cbe2d398bb00b97ea"
        contactType:
          type: string
          description: Contact type
          enum:
            - EMAIL
            - MOBILE
        email:
          type: string
          example: example@br.bradesco.com
        mobile:
          $ref: '#/components/schemas/UserMobile'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/AuthenticationFactorSettings'
          description: When a tag is applied to an authentication factor, associated rules can be executed to change tags from another authentication factors. These tags are also used on parameters to filter results when retrieve the contacts.
          example: "[\"MARKED_RESOURCES\"]"
    NewAuthenticationFactorResponse:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          description: Unique identifier to alternative contact, ```main-email``` or ```main-mobile```
          example: "5efd263cbe2d398bb00b97ea"
        email:
          type: string
          example: example@br.bradesco.com
        mobile:
          $ref: '#/components/schemas/UserMobile'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/AuthenticationFactorSettings'
          description: When a tag is applied to an authentication factor, associated rules can be executed to change tags from another authentication factors. These tags are also used on parameters to filter results when retrieve the contacts.
          example: "[\"MARKED_RESOURCES\"]"
        error:
          $ref: '#/components/schemas/ErrorModel'
    PatchAuthenticationFactorRequest:
      type: object
      properties:
        email:
          type: string
          example: example@br.bradesco.com
        mobile:
          $ref: '#/components/schemas/UserMobile'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/AuthenticationFactorSettings'
          description: When a tag is applied to an authentication factor, associated rules can be executed to change tags from another authentication factors. These tags are also used on parameters to filter results when retrieve the contacts.
          example: "[\"MARKED_RESOURCES\"]"
    ObfuscatedAuthenticationFactor:
      type: object
      required:
        - id
        - type
        - credential
        - default
      properties:
        id:
          type: string
          description: Unique identifier to alternative contact, ```main-email``` or ```main-mobile```
          example: "5efd263cbe2d398bb00b97ea"
        contactType:
          type: string
          description: Contact type
          enum:
            - EMAIL
            - MOBILE
        email:
          type: string
          example: ex***le@br.e*******.com
        mobile:
          $ref: '#/components/schemas/UserObfuscatedMobile'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/AuthenticationFactorSettings'
          description: When a tag is applied to an authentication factor, associated rules can be executed to change tags from another authentication factors. These tags are also used on parameters to filter results when retrieve the contacts.
          example: "[\"MARKED_RESOURCES\"]"
        credential:
          type: boolean
          example: false
        default:
          type: boolean
          example: false
    AuthenticationFactorSettings:
      type: string
      description: A value to tag an authentication factor.
        MARKED_RESOURCES can only be applied by email and by mobile
      enum:
        - MARKED_RESOURCES
    UserMobile:
      type: object
      required:
        - regionCode
        - phoneNumber
      properties:
        regionCode:
          type: integer
          format: int32
          example: 55
        areaCode:
          type: integer
          format: int32
          example: 11
          description: Required for Brazil region code (code = 55)
        phoneNumber:
          type: integer
          format: int64
          example: 911112222
    ChangePassword:
      required:
        - newPassword
        - password
      type: object
      properties:
        password:
          type: string
        newPassword:
          type: string
    UserObfuscatedMobile:
      type: object
      required:
        - regionCode
        - phoneNumber
      properties:
        regionCode:
          type: string
          example: "55"
        areaCode:
          type: string
          example: "11"
          description: Required for Brazil region code (code = 55)
        phoneNumber:
          type: string
          example: "*****2222"
    UserIdentity:
      type: object
      properties:
        userEmail:
          type: string
        userMobile:
          $ref: '#/components/schemas/UserMobile'
        legacyLogons:
          type: array
          items:
            type: string
            example: sne6213
        hasPassword:
          type: boolean
    ImproveIdentity:
      description: One of userEmail or userMobile are required
      type: object
      properties:
        userEmail:
          type: string
        userMobile:
          $ref: '#/components/schemas/UserMobile'
        defaultBusinessId:
          type: string
    CreatePassword:
      type: object
      required:
        - newPassword
      properties:
        newPassword:
          type: string
    OpaqueToken:
      type: object
      properties:
        token:
          type: string
          example: 'YzAzZWE1YWR1UHBHb1otOThlNC00OWQ2LWFlYTUtNGYwY2FmZTAzYj8ier'
    AttachBusinessGroupRequest:
      type: object
      required:
        - action
      properties:
        action:
          type: string
          enum:
            - CREATE_BUSINESS_GROUP
            - ATTACH_BUSINESS_ACCOUNT
            - ATTACH_CONTROLLER_USER
            - PATCH_CONTROLLER_USER
        businessAccounts:
          type: array
          description: List of Account BusinessId
          minItems: 1
          uniqueItems: true
          items:
            $ref: '#/components/schemas/BusinessAccountsRequest'
        controllerUsers:
          type: array
          description: List of user candidates for controllers
          minItems: 1
          uniqueItems: true
          items:
            $ref: '#/components/schemas/ControllerUserRequest'
    DetachBusinessGroupRequest:
      type: object
      required:
        - action
      properties:
        action:
          type: string
          enum:
            - DELETE_BUSINESS_GROUP
            - DETACH_BUSINESS_ACCOUNT
            - DETACH_CONTROLLER_USER
        businessAccounts:
          type: array
          description: List of Account BusinessId
          minItems: 1
          uniqueItems: true
          items:
            $ref: '#/components/schemas/BusinessAccountsRequest'
        controllerUsers:
          type: array
          description: List of user candidates for controllers
          minItems: 1
          uniqueItems: true
          items:
            $ref: '#/components/schemas/DetachControllerUserRequest'

  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorList'
    Default:
      description: Default Error. This response is used for all HTTP codes that are
        not covered individually for this operation.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorList'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorList'
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorList'
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorList'
    NotImplemented:
      description: Not Implemented
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorList'
    PaymentRequired:
      description: Payment Required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorList'
    ServiceUnavailable:
      description: Service Unavailable
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorList'
    Unauthorized:
      description: Authorization Failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorList'
    UnprocessableEntity:
      description: Unprocessable entity
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorList'

  securitySchemes:
    OauthSecurityUser:
      type: oauth2
      flows:
        password:
          tokenUrl: http://localhost:35000/bradesco/security/v1/user/login
          scopes:
            read: User read scope
            write: User write scope
    OauthSecurityClient:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: http://localhost:35000/bradesco/security/v1/client/login
          scopes:
            read: Client read scope
            write: Client write scope